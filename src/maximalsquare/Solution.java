package maximalsquare;

public class Solution {
    public int maximalSquare(char[][] matrix) {
        int maxall = 0;
        if(matrix.length==0)
        	return maxall;
    	int[][] top = new int[matrix.length][matrix[0].length];
    	int[][] left = new int[matrix.length][matrix[0].length];
    	int[][] max = new int[matrix.length][matrix[0].length];
    	for(int i=0;i<matrix.length;i++){
    		for(int j=0;j<matrix[0].length;j++){
    			if(matrix[i][j]=='0'){
    				top[i][j] = -1;
    				left[i][j] = -1;
    			}else{
    				max[i][j] = 1;
    				top[i][j]  = (i-1<0?-1:top[i-1][j]) + 1;
    				left[i][j] = (j-1<0?-1:left[i][j-1]) + 1;
					if(i>0&&j>0&&top[i-1][j-1]!=-1){
						if(top[i][j]>=max[i-1][j-1]&&left[i][j]>=max[i-1][j-1])
							max[i][j] += max[i-1][j-1];
						else
							max[i][j] += Math.min(left[i][j],top[i][j]);
					}	
    			}
    			maxall = Math.max(maxall,max[i][j]);
    			System.out.println(i+"-"+j+":"+top[i][j]+"-"+left[i][j]+"   max="+max[i][j]);
    		}
    	}
    	return maxall*maxall;
    }
	public static void main(String[] args) {
		char[][] matrix1 ={
			"1111111111111101001111111100111011111111".toCharArray(),
			"1111011011111111101101111101111111111111".toCharArray(),
			"0111101011111101101101101111111111111111".toCharArray(),
			"0101101011111111111101111111010110111111".toCharArray(),
			"1111111111110111110110010111111111111111".toCharArray(),
			"1111111110110101111111111101011111101111".toCharArray(),
			"0110110101110011111111111111110111110101".toCharArray(),
			"0111111111111100111111100110011011010101".toCharArray(),
			"1111011110111111111011011011110101101011".toCharArray(),
			"1111111110111111111101101101110111101111".toCharArray(),
			"1110110011111111111100111111111111111111".toCharArray(),
			"1011111110111101111001110111111111111111".toCharArray(),
			"0110111111111111101111110111011111011111".toCharArray(),
			"1111111111111111011111111111110111111011".toCharArray(),
			"1111100111111110101100111111111111101111".toCharArray(),
			"1111101111111110111111011111111111011111".toCharArray(),
			"1111101111111111111111011001111110011111".toCharArray(),
			"1111110111111111011111111111110111110111".toCharArray(),
			"1011111111111111010111110010111110111111".toCharArray(),
			"1111110011111111111110111111111111111011".toCharArray(),
			"1111111111111111110111011111011111011011".toCharArray(),
			"1100011011111111111111011111011111111111".toCharArray(),
			"1111101011111111111101100101110011111111".toCharArray(),
			"1110010111111111111011011110111101111101".toCharArray(),
			"1111111111111101101111111111101111111111".toCharArray(),
			"1111111011111101111011111111111110111111".toCharArray(),
			"1110011111111110111011111111110111110111".toCharArray(),
			"1111111111111100111111010111111111110111".toCharArray(),
			"1111111111111111111111000111111111011101".toCharArray(),
			"1111110111111111111111111101100111011011".toCharArray(),
			"1111011011111101101101111110111111101111".toCharArray(),
			"1111111111011111111111111111111111111111".toCharArray(),
			"1111111111111111111111111111111111111111".toCharArray(),
			"1100011111111110111111111111101111111011".toCharArray(),
			"1111101111111101111010111111111111111111".toCharArray(),
			"0111111111110011111111110101011011111111".toCharArray(),
			"1011011111101111111111101111111111110011".toCharArray(),
			"1010111111111111111111111111111110011111".toCharArray(),
			"0111101111011111111111111111110111111111".toCharArray(),
			"0111111011111111011101111011101111111111".toCharArray(),
			"0111111111110101111011111101011001111011".toCharArray(),
			"1111111111111011110111111101111111101110".toCharArray(),
			"1111101111111100111111111110111111001111".toCharArray(),
			"1101101111110101111101111111100111010100".toCharArray(),
			"0110111111100111110010111110111011011101".toCharArray()
		};
//		char[][] matrix = {
//				{'1', '0', '1', '0', '0'},
//				{'1', '0', '1', '1', '0'},
//				{'1', '0', '1', '1', '0'},
//				{'1', '1', '1', '1', '0'}
//				};
		Solution s = new Solution();
		System.out.println(s.maximalSquare(matrix1));
	}
}
